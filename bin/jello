#!/usr/bin/env ruby -Ku
($:.unshift File.expand_path(File.join( File.dirname(__FILE__), '..', 'lib' ))).uniq!
%w[jello rubygems optparse].each {|dep| require dep }

options = Hash.new
OptionParser.new do |opts|
  opts.banner = "\
= Jello =

Moulds may be any string that matches a part of a path of a Ruby file relative\
to one of the entries in the Jello search path:
 - ~/.jello
 - /etc/jello
 - <`gem contents jello`>/moulds

If a file matches earlier in the search path, later ones that also match will\
be ignored.

A directory may match, in which case all Ruby files in that directory will be\
utilized.

The follow moulds are included for your enjoyment:
 - jello say
 - jello grabup
 - jello shorten

== Usage ==
`jello [options] <mould> (<mould> <mould> â€¦)`
"
  
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  
  opts.on("-d", "--[no-]debug", "Run extremely verbosely") do |d|
    $-d = d
  end
  
  opts.on("-f", "--[no-]feedback", "Feedback on successful process") do |f|
    options[:feedback] = f
  end
  
  opts.on("-p", "--period PERIOD", "Period over which to cycle watcher process") do |p|
    options[:period] = p
  end
  
  
end.parse!

ARGV.each do |mould|
  require Jello::Mould.find(mould)
end

Jello.start! options